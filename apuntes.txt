----------------- Apuntes personales -----------------

--------------- Como crear el proyecto ---------------

1) Creo el package.json, con node init -y
2) Instalar express
3) Crear el .gitignore
4) Crear mi estructura del proyecto

--------------- Estructura del Proyecto ---------------

apirest-practice/
├── .env
├── .gitignore
├── apuntes.txt
├── index.js
├── package-lock.json
├── package.json
├── node_modules/
└── src/
    ├── config/
    ├── controllers/
    ├── db/
    │   ├── carts.json
    │   └── products.json
    ├── managers/
    │   └── ProductsManager.js
    │   └── CartsManager.js   
    ├── public/
    ├── routes/
    ├── services/
    └── utils/
        ├── index.js
        └── server.js

--------------- Explicación de Directorios (src) ---------------

- config/: Archivos de configuracion de la aplicacion (ej: ajustes de base de datos, puertos, variables de entorno específicas).
- controllers/: Contiene la lógica para manejar las solicitudes entrantes de los clientes y enviar las respuestas. Actúan como intermediarios.
- db/: Archivos relacionados con la base de datos o fuentes de datos persistentes (ej: archivos JSON, scripts SQL iniciales).
- managers/: Encargados de la lógica de negocio o la gestión de datos. A menudo coordinan entre controladores y servicios/db.
- public/: Archivos estáticos accesibles directamente desde el navegador (ej: HTML, CSS, imágenes, JavaScript del lado del cliente).
- routes/: Define las rutas URL de la aplicacion y mapea las URLs a las funciones controladoras correspondientes.
- services/: Contiene la logica de negocio reutilizable o la interaccion con servicios externos o fuentes de datos.
- utils/: Funciones de utilidad o ayudantes generales que se usan en varias partes del proyecto.

--------------------- Otros ---------------------

- Ctrl + shift + A, comentar todo lo seleccionado


--------------- Concepto de Req ------------------
    En si seria lo requerido desde el front
    Contiene:
        - PARAMS{}
        - QUERY{}
        - BODY{}
    ¿Como accedes a cada seccion?
    ej: const dataUserName = req.params.username
    // Pruebas 
    app.get('/info/:username', (req,res)=> {
        const params = req.params;
        const query = req.query;
        const body = req.body;
        res.status(200).json({name: "Informacion de  require", parametros: params.username, consulta: query, cuerpo: body} )
    })

--------------- Concepto de Res ------------------
    Contiene la respuesta que mandaremos al front
    los métodos que contiene son :
    res.status(code) → Define el código de estado HTTP (ej. 200, 404, 500).
    res.send(data) → Envía una respuesta simple (texto, HTML, JSON, etc).
    res.json(obj) → Envía una respuesta en formato JSON (ideal para APIs).
    res.redirect(url) → Redirige a otra URL.
    res.set(header, value) → Establece encabezados personalizados.

------------- Concepto de Middleware ----------------

    Ejemplo de get con funciones callback:
    app.get('/', funcionX,()=>{}, (req,res)=>{})

    En este caso funcionX y la de al lado pueden 
    son funciones intermediaras (Estas funciones, 
    intermedias son denominadsa middleware, estas son
    usadas normalmente para hacer validaciones)
    se ejecutan para luego ejecutar la funcion final
    donde definis  realmente tu respuesta "res". 


----------------------- Handlenbars -------------------

    En si el funcionamiento es el siguiente; en principio main.hbs seria la plantailla base (layout), es la
    estructura general de la pagina puede tener header(dinamico), body ( lo mas dinamico comunmente) y 
    footer(dinamico). Luego el index.hbs seria la plantila espeficia que hereda la estructura del main
    esta se usa normalmente como pantalla de inicio. 
    
    Todo esto se debe de declarar en el engine del server, es decir, declarar que por ejempo main.hbs 
    de esta manera:    " defaultLayout: "main", ". Luego vos renderizas cada estructura adicional
    (como el index) con un render... al momento de declarar el endpoint.

    Conceptos:

     - El archivo main.handlebars  actúa como una plantilla base o layout. Es la estructura general
    de la página que será compartida por todas las plantillas de tu aplicación. Aquí es donde 
    defines elementos que se repetirán en varias páginas, como el encabezado, pie de página, y 
    la estructura básica del HTML.

     -El archivo index.handlebars  es una plantilla específica que hereda la estructura de main.handlebars.
    Esta plantilla se utiliza para definir el contenido específico de una página, como la página de inicio

    